import os
import openpyxl
from telegram import Update, InputFile
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          ConversationHandler, ContextTypes, filters)
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

EXCEL_FILE = "–¢–∞–±–ª–∏—Ü–∞_–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏_–∏_FoodCost_—Å_–ü—Ä–∏–±—ã–ª—å—é.xlsx"
–¢–¢–ö_FILE = "–¢–¢–ö.xlsx"
INVENTORY_FILE = "inventory.xlsx"

# –°–æ–∑–¥–∞–Ω–∏–µ Excel, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
for file_name, headers in [(EXCEL_FILE, ["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥"]),
                           (–¢–¢–ö_FILE, ["–ë–ª—é–¥–æ", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ì—Ä–∞–º–º–æ–≤–∫–∞"]),
                           (INVENTORY_FILE, ["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–û—Å—Ç–∞—Ç–æ–∫ (–≥)"])]:
    if not os.path.exists(file_name):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(headers)
        wb.save(file_name)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /ttk, /ttk_bulk, /zakup, /inventory, /delete, /table, /ttk_file –∏ —Ç.–¥."
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lines = text.split("\n")
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active

    for line in lines:
        parts = line.replace("–≥—Ä", "").split()
        if len(parts) == 2:
            ingredient = parts[0]
            price_str = parts[1]
        elif len(parts) >= 3:
            ingredient = " ".join(parts[:-2])
            try:
                mass = float(parts[-2])
                price = float(parts[-1])
                price_per_kg = round((price / mass) * 1000, 2)
                _update_or_add(ws, ingredient, price_per_kg)
                continue
            except:
                continue
        else:
            continue

        try:
            price = float(price_str)
            _update_or_add(ws, ingredient, price)
        except:
            continue

    wb.save(EXCEL_FILE)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


def _update_or_add(ws, ingredient, price):
    found = False
    for row in ws.iter_rows(min_row=2):
        if row[0].value and row[0].value.lower() == ingredient.lower():
            row[1].value = price
            found = True
            break
    if not found:
        ws.append([ingredient, price])


async def delete_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = " ".join(context.args).strip().lower()
    deleted = False

    for file, col in [(EXCEL_FILE, 0), (–¢–¢–ö_FILE, 0)]:
        wb = openpyxl.load_workbook(file)
        ws = wb.active
        rows = list(ws.iter_rows(min_row=2))
        for row in rows:
            if row[col].value and row[col].value.strip().lower() == name:
                ws.delete_rows(row[0].row)
                deleted = True
        wb.save(file)

    if deleted:
        await update.message.reply_text(f"üóëÔ∏è '{name}' —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü.")
    else:
        await update.message.reply_text(f"‚ùå '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def send_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(EXCEL_FILE):
        with open(EXCEL_FILE, "rb") as file:
            await update.message.reply_document(file, filename="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.xlsx")


async def send_ttk_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(–¢–¢–ö_FILE):
        with open(–¢–¢–ö_FILE, "rb") as file:
            await update.message.reply_document(file, filename="–¢–¢–ö.xlsx")


INVENTORY_MODE = range(1)


async def start_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–æ–¥—É–∫—Ç 1200\n–ü—Ä–æ–¥—É–∫—Ç 500")
    return INVENTORY_MODE


async def save_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = update.message.text.strip().split("\n")
    wb_inv = openpyxl.load_workbook(INVENTORY_FILE)
    ws_inv = wb_inv.active
    ws_inv.delete_rows(2, ws_inv.max_row)

    inventory = {}
    for line in lines:
        parts = line.replace("–≥—Ä", "").split()
        if len(parts) < 2:
            continue
        name = " ".join(parts[:-1])
        try:
            grams = float(parts[-1])
            ws_inv.append([name, grams])
            inventory[name.lower()] = grams
        except ValueError:
            continue
    wb_inv.save(INVENTORY_FILE)

    wb_price = openpyxl.load_workbook(EXCEL_FILE)
    ws_price = wb_price.active
    prices = {
        row[0].value.lower(): row[1].value
        for row in ws_price.iter_rows(min_row=2)
        if row[0].value and row[1].value
    }

    total = 0
    result_lines = []
    for name, grams in inventory.items():
        price_per_kg = prices.get(name)
        if price_per_kg:
            cost = grams / 1000 * price_per_kg
            total += cost
            result_lines.append(
                f"{name.title()}: {int(grams)} –≥—Ä √ó {price_per_kg}‚ÇΩ = {round(cost, 2)}‚ÇΩ"
            )
        else:
            result_lines.append(f"{name.title()}: –Ω–µ—Ç —Ü–µ–Ω—ã –≤ –º–∞—Ç—Ä–∏—Ü–µ")

    result_lines.append(f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {round(total, 2)}‚ÇΩ")
    await update.message.reply_text("\n".join(result_lines))
    return ConversationHandler.END


ADD_TTK_NAME, ADD_TTK_ING = range(2)


async def start_ttk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    return ADD_TTK_NAME


async def get_ttk_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['ttk_name'] = update.message.text.strip()
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ).")
    return ADD_TTK_ING


async def save_ttk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data['ttk_name']
    lines = update.message.text.strip().split("\n")
    wb = openpyxl.load_workbook(–¢–¢–ö_FILE)
    ws = wb.active

    for line in lines:
        clean = line.replace("–≥—Ä", "").strip()
        parts = clean.split()
        if len(parts) < 2:
            continue
        ingredient = " ".join(parts[:-1])
        try:
            weight = float(parts[-1])
            ws.append([name, ingredient, weight])
        except ValueError:
            continue

    wb.save(–¢–¢–ö_FILE)
    await update.message.reply_text(f"‚úÖ –¢–¢–ö –¥–ª—è ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    return ConversationHandler.END


async def calculate_zakup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.replace("/zakup", "").strip().split(",")
    wb = openpyxl.load_workbook(–¢–¢–ö_FILE)
    ws = wb.active
    summary = {}

    for part in args:
        tokens = part.strip().rsplit(" ", 1)
        if len(tokens) != 2:
            continue
        dish, servings = tokens
        try:
            servings = int(servings)
        except:
            continue

        for row in ws.iter_rows(min_row=2, values_only=True):
            if row[0].strip().lower() == dish.strip().lower():
                name, grams = row[1], row[2]
                summary[name] = summary.get(name, 0) + servings * grams

    if not summary:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    result = ["üßæ –ó–∞–∫—É–ø:"]
    for name, grams in summary.items():
        if grams >= 1000:
            result.append(f"{name}: {round(grams/1000, 2)} –∫–≥")
        else:
            result.append(f"{name}: {int(grams)} –≥—Ä")
    await update.message.reply_text("\n".join(result))


BULK_MODE = range(1)


async def start_ttk_bulk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –±–ª–æ–∫–∏ –¢–¢–ö —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏:")
    return BULK_MODE


async def save_bulk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = update.message.text.strip().split("\n")
    wb = openpyxl.load_workbook(–¢–¢–ö_FILE)
    ws = wb.active

    current_dish = None
    for line in lines:
        line = line.strip()
        if line.lower().startswith("–Ω–∞–∑–≤–∞–Ω–∏–µ:"):
            current_dish = line.split(":", 1)[-1].strip()
            continue
        if not current_dish:
            continue
        clean = line.replace("–≥—Ä", "").strip()
        parts = clean.split()
        if len(parts) < 2:
            continue
        ing = " ".join(parts[:-1])
        try:
            grams = float(parts[-1])
            ws.append([current_dish, ing, grams])
        except:
            continue
    wb.save(–¢–¢–ö_FILE)
    await update.message.reply_text("‚úÖ –¢–¢–ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    return ConversationHandler.END


app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("table", send_excel))
app.add_handler(CommandHandler("ttk_file", send_ttk_file))
app.add_handler(CommandHandler("delete", delete_entry))
app.add_handler(CommandHandler("zakup", calculate_zakup))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("inventory", start_inventory)],
    states={INVENTORY_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_inventory)]},
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("ttk", start_ttk)],
    states={
        ADD_TTK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ttk_name)],
        ADD_TTK_ING: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_ttk)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("ttk_bulk", start_ttk_bulk)],
    states={BULK_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_bulk)]},
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()